{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA0EA,aA1EA,IAAA,EAAA,WAKI,SAAA,IACQ,IAAA,EAAe,SAAS,eAAe,SAC3C,EAAiB,WAAW,GAiEpC,OA9DW,EAAA,UAAA,OAAP,SAAc,GACJ,IAAA,EAAS,EAAM,OACjB,GAAC,EAAiB,YAAY,GAA9B,CAIA,IAAA,EAAe,EACnB,EAAiB,WAAW,KAGzB,EAAA,WAAP,SAAkB,GACV,IAAA,EAAQ,EAAiB,0BAA0B,GAEnD,EAAiB,SAAS,eAAe,YACzC,GAAC,EAAD,CAIA,IAAA,EAAa,EAAiB,WAAW,GACzC,GAAC,EAAD,CAIA,IAIA,GAFJ,EAAa,EAAW,QAFR,YACA,cAGc,QAAQ,KAClC,EAAW,EAAW,OAAO,EAAG,GAChC,EAAW,EAAW,OAAO,EAAe,GAEhD,EAAe,UACX,EACE,6BACA,KAGH,EAAA,WAAP,SAAkB,GACV,GAAA,MAAM,GACC,MAAA,4BAIP,IACA,GADkB,EAAQ,EAAiB,YACA,EAAiB,oBAC5D,OAAA,EAAyB,EAAiB,oBAEnC,4BAGA,IAAI,KAAK,GACR,eAGT,EAAA,YAAP,SAAmB,GACR,MAAkB,SAAlB,EAAO,SAAmC,SAAb,EAAO,IAGxC,EAAA,0BAAP,SAAiC,GACzB,IAAA,EAAW,EAAa,MACrB,OAAA,OAAO,IArEX,EAAA,WAAqB,YACrB,EAAA,oBAA8B,IAC9B,EAAA,oBAA8B,OAqEzC,EAxEA,GA0EA,OAAO,OAAS,WACR,IAAA,EAAU,IAAI,EAClB,SAAS,iBAAiB,QAAS,EAAQ","file":"src.c1e38567.js","sourceRoot":"..\\src","sourcesContent":["class TickInputHandler {\r\n    static epochTicks: number = 621355968000000000;\r\n    static ticksPerMillisecond: number = 10000;\r\n    static maxDateMilliseconds: number = 8640000000000000; // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\r\n\r\n    constructor() {\r\n        var inputElement = document.getElementById(\"ticks\") as HTMLInputElement;\r\n        TickInputHandler.showResult(inputElement);\r\n    }\r\n\r\n    public doWork(event: KeyboardEvent) {\r\n        const target = event.target as HTMLElement;\r\n        if (!TickInputHandler.isTickInput(target)) {\r\n            return;\r\n        }\r\n\r\n        var inputElement = target as HTMLInputElement;\r\n        TickInputHandler.showResult(inputElement);\r\n    }\r\n\r\n    static showResult(inputElement: HTMLInputElement) {\r\n        var value = TickInputHandler.getTickInputValueAsNumber(inputElement);\r\n\r\n        var dateTimeOutput = document.getElementById(\"datetime\");\r\n        if (!dateTimeOutput) {\r\n            return;\r\n        }\r\n\r\n        var dateString = TickInputHandler.parseTicks(value);\r\n        if (!dateString) {\r\n            return;\r\n        }\r\n\r\n        var goodParts = /([0-9]+)/g;\r\n        var wrapParts = \"<b>$1</b>\";\r\n        dateString = dateString.replace(goodParts, wrapParts);\r\n\r\n        var firstTIndext = dateString.indexOf(\"T\");\r\n        var datePart = dateString.substr(0, firstTIndext);\r\n        var timePart = dateString.substr(firstTIndext + 1);\r\n\r\n        dateTimeOutput.innerHTML =\r\n            datePart\r\n            + \"<span class='pad'>T</span>\"\r\n            + timePart;\r\n    }\r\n\r\n    static parseTicks(ticks: number) {\r\n        if (isNaN(ticks)) {\r\n            return \"____-__-__T__:__:__.____Z\";\r\n        }\r\n\r\n        // convert the ticks into something javascript understands\r\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\r\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\r\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\r\n            //      +035210-09-17T07:18:31.111Z\r\n            return \"9999-99-99T99:99:99:9999Z\";\r\n        }\r\n        // output the result in something the human understands\r\n        var date = new Date(millisecondsSinceEpoch);\r\n        return date.toISOString();\r\n    }\r\n\r\n    static isTickInput(target: HTMLElement) {\r\n        return target.tagName == 'INPUT' && target.id == 'ticks';\r\n    }\r\n\r\n    static getTickInputValueAsNumber(inputElement: HTMLInputElement) {\r\n        var valueStr = inputElement.value;\r\n        return Number(valueStr);\r\n    }\r\n}\r\n\r\nwindow.onload = () => {\r\n    var handler = new TickInputHandler();\r\n    document.addEventListener(\"keyup\", handler.doWork);\r\n};"]}