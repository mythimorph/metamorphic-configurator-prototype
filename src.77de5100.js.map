{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.77de5100.js","sourceRoot":"..\\src","sourcesContent":["class TickInputHandler {\r\n    static epochTicks: number = 621355968000000000;\r\n    static ticksPerMillisecond: number = 10000;\r\n    static maxDateMilliseconds: number = 8640000000000000; // http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\r\n\r\n    constructor() {\r\n        var inputElement = document.getElementById(\"ticks\") as HTMLInputElement;\r\n        TickInputHandler.showResult(inputElement);\r\n    }\r\n\r\n    public doWork(event: KeyboardEvent) {\r\n        const target = event.target as HTMLElement;\r\n        if (!TickInputHandler.isTickInput(target)) {\r\n            return;\r\n        }\r\n\r\n        var inputElement = target as HTMLInputElement;\r\n        TickInputHandler.showResult(inputElement);\r\n    }\r\n\r\n    static showResult(inputElement: HTMLInputElement) {\r\n        var value = TickInputHandler.getTickInputValueAsNumber(inputElement);\r\n\r\n        var dateTimeOutput = document.getElementById(\"datetime\");\r\n        if (!dateTimeOutput) {\r\n            return;\r\n        }\r\n\r\n        var dateString = TickInputHandler.parseTicks(value);\r\n        if (!dateString) {\r\n            return;\r\n        }\r\n\r\n        var goodParts = /([0-9]+)/g;\r\n        var wrapParts = \"<b>$1</b>\";\r\n        dateString = dateString.replace(goodParts, wrapParts);\r\n\r\n        var firstTIndext = dateString.indexOf(\"T\");\r\n        var datePart = dateString.substr(0, firstTIndext);\r\n        var timePart = dateString.substr(firstTIndext + 1);\r\n\r\n        dateTimeOutput.innerHTML =\r\n            datePart\r\n            + \"<span class='pad'>T</span>\"\r\n            + timePart;\r\n    }\r\n\r\n    static parseTicks(ticks: number) {\r\n        if (isNaN(ticks)) {\r\n            return \"____-__-__T__:__:__.____Z\";\r\n        }\r\n\r\n        // convert the ticks into something javascript understands\r\n        var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\r\n        var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\r\n        if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\r\n            //      +035210-09-17T07:18:31.111Z\r\n            return \"9999-99-99T99:99:99:9999Z\";\r\n        }\r\n        // output the result in something the human understands\r\n        var date = new Date(millisecondsSinceEpoch);\r\n        return date.toISOString();\r\n    }\r\n\r\n    static isTickInput(target: HTMLElement) {\r\n        return target.tagName == 'INPUT' && target.id == 'ticks';\r\n    }\r\n\r\n    static getTickInputValueAsNumber(inputElement: HTMLInputElement) {\r\n        var valueStr = inputElement.value;\r\n        return Number(valueStr);\r\n    }\r\n}\r\n\r\nwindow.onload = () => {\r\n    var handler = new TickInputHandler();\r\n    document.addEventListener(\"keyup\", handler.doWork);\r\n};"]}